// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderManagementSystem.Data;

#nullable disable

namespace OrderManagementSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OrderManagementSystem.Models.Billing", b =>
                {
                    b.Property<string>("Billing_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Billing_Account_ID")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("User_ID")
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Billing_ID");

                    b.HasIndex("Billing_Account_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.BillingAccount", b =>
                {
                    b.Property<string>("Billing_Account_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double>("Account_Balance")
                        .HasColumnType("float");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Billing_Account_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("BillingAccounts");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Cost", b =>
                {
                    b.Property<string>("Cost_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Cost_ID");

                    b.ToTable("Costs");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Cost_Based_Billing", b =>
                {
                    b.Property<string>("Billing_Account_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Cost_Charge_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Billing_Account_ID", "Cost_Charge_ID");

                    b.HasIndex("Cost_Charge_ID");

                    b.ToTable("Cost_Based_Billings");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Cost_Based_Charges", b =>
                {
                    b.Property<string>("Cost_Charge_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Cost_Charge_ID");

                    b.ToTable("Cost_Based_Charges");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.FreightOutbound", b =>
                {
                    b.Property<string>("Outbound_Order_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime>("Creation_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Destination_Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Estimated_Delivery_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FBA_Shipment_ID")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("FBA_Tracking_Number")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("Order_Ship_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Order_Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Order_Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Outbound_Method")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Product_Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Recipient_Post_Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reference_Order_Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Related_Adjustment_Order")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Shipping_Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tracking_Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Transport_Days")
                        .HasColumnType("int");

                    b.Property<string>("Warehouse_ID")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Outbound_Order_ID");

                    b.HasIndex("Creator");

                    b.HasIndex("Warehouse_ID");

                    b.ToTable("FreightOutbounds");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.FreightProductList", b =>
                {
                    b.Property<string>("Order_ID")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Product_ID")
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Order_ID", "Product_ID");

                    b.HasIndex("Product_ID");

                    b.ToTable("FreightProductLists");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.InboundOrders", b =>
                {
                    b.Property<string>("Inbound_Order_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Arrival_Method")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Boxes")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime>("Creation_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Estimated_Arrival")
                        .HasColumnType("datetime2");

                    b.Property<string>("Inbound_Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Order_Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Product_Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reference_Order_Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Tracking_Number")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Warehouse_ID")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Inbound_Order_ID");

                    b.HasIndex("Creator");

                    b.HasIndex("Warehouse_ID");

                    b.ToTable("InboundOrders");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.InboundProductList", b =>
                {
                    b.Property<string>("Order_ID")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Product_ID")
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Order_ID", "Product_ID");

                    b.HasIndex("Product_ID");

                    b.ToTable("InboundProductLists");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Inventory", b =>
                {
                    b.Property<string>("Product_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Product_Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Product_Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Warehouse_ID")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Product_ID");

                    b.HasIndex("Warehouse_ID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Order_Based_Billing", b =>
                {
                    b.Property<string>("Billing_Account_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Order_Charge_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Billing_Account_ID", "Order_Charge_ID");

                    b.HasIndex("Order_Charge_ID");

                    b.ToTable("Order_Based_Billings");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Order_Based_Charges", b =>
                {
                    b.Property<string>("Order_Charge_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Order_Charge_ID");

                    b.ToTable("Order_Based_Charges");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.ParcelOutbound", b =>
                {
                    b.Property<string>("Order_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Boxes")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Creation_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("Delivery_Time")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Estimated_Delivery_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Internet_Posting_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Latest_Information")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Order_Status")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Order_Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reference_Order_Number")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Related_Adjustment_Order")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("Ship_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Shipping_Company")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Tracking_Number")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("Tracking_Update_Time")
                        .HasColumnType("datetime2");

                    b.Property<int>("Transport_Days")
                        .HasColumnType("int");

                    b.Property<string>("Warehouse_ID")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Order_ID");

                    b.HasIndex("Creator");

                    b.HasIndex("Warehouse_ID");

                    b.ToTable("ParcelOutbounds");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.ParcelProductList", b =>
                {
                    b.Property<string>("Order_ID")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Product_ID")
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Order_ID", "Product_ID");

                    b.HasIndex("Product_ID");

                    b.ToTable("ParcelProductLists");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.PlatformOrder", b =>
                {
                    b.Property<string>("Order_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Order_ID");

                    b.ToTable("PlatformOrders");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Roles", b =>
                {
                    b.Property<string>("Role_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Role_Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Role_ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.User", b =>
                {
                    b.Property<string>("User_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("Date_Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("User_ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.UserRole", b =>
                {
                    b.Property<string>("User_ID")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Role_ID")
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("User_ID", "Role_ID");

                    b.HasIndex("Role_ID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Warehouse", b =>
                {
                    b.Property<string>("Warehouse_ID")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Warehouse_ID");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Billing", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.BillingAccount", "BillingAccount")
                        .WithMany("Billings")
                        .HasForeignKey("Billing_Account_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.User", null)
                        .WithMany("Billings")
                        .HasForeignKey("User_ID");

                    b.Navigation("BillingAccount");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.BillingAccount", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.User", "User")
                        .WithMany("BillingAccounts")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Cost_Based_Billing", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.BillingAccount", "BillingAccount")
                        .WithMany("Cost_Based_Billings")
                        .HasForeignKey("Billing_Account_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Cost_Based_Charges", "Cost_Based_Charges")
                        .WithMany()
                        .HasForeignKey("Cost_Charge_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingAccount");

                    b.Navigation("Cost_Based_Charges");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.FreightOutbound", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Creator")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Warehouse", "Warehouse")
                        .WithMany("FreightOutbounds")
                        .HasForeignKey("Warehouse_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.FreightProductList", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.FreightOutbound", "FreightOutbound")
                        .WithMany("FreightProductLists")
                        .HasForeignKey("Order_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Inventory", "Inventory")
                        .WithMany("FreightProductLists")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FreightOutbound");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.InboundOrders", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Creator")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Warehouse", "Warehouse")
                        .WithMany("InboundOrders")
                        .HasForeignKey("Warehouse_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.InboundProductList", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.InboundOrders", "InboundOrder")
                        .WithMany("InboundProductLists")
                        .HasForeignKey("Order_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Inventory", "Inventory")
                        .WithMany("InboundProductLists")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InboundOrder");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Inventory", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.Warehouse", "Warehouse")
                        .WithMany("Inventories")
                        .HasForeignKey("Warehouse_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Order_Based_Billing", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.BillingAccount", "BillingAccount")
                        .WithMany("Order_Based_Billings")
                        .HasForeignKey("Billing_Account_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Order_Based_Charges", "Order_Based_Charges")
                        .WithMany()
                        .HasForeignKey("Order_Charge_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingAccount");

                    b.Navigation("Order_Based_Charges");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.ParcelOutbound", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Creator")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Warehouse", "Warehouse")
                        .WithMany("ParcelOutbounds")
                        .HasForeignKey("Warehouse_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.ParcelProductList", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.ParcelOutbound", "ParcelOutbound")
                        .WithMany("ParcelProductLists")
                        .HasForeignKey("Order_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Inventory", "Inventory")
                        .WithMany("ParcelProductLists")
                        .HasForeignKey("Product_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("ParcelOutbound");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.UserRole", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.Roles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("Role_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.BillingAccount", b =>
                {
                    b.Navigation("Billings");

                    b.Navigation("Cost_Based_Billings");

                    b.Navigation("Order_Based_Billings");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.FreightOutbound", b =>
                {
                    b.Navigation("FreightProductLists");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.InboundOrders", b =>
                {
                    b.Navigation("InboundProductLists");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Inventory", b =>
                {
                    b.Navigation("FreightProductLists");

                    b.Navigation("InboundProductLists");

                    b.Navigation("ParcelProductLists");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.ParcelOutbound", b =>
                {
                    b.Navigation("ParcelProductLists");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Roles", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.User", b =>
                {
                    b.Navigation("BillingAccounts");

                    b.Navigation("Billings");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Warehouse", b =>
                {
                    b.Navigation("FreightOutbounds");

                    b.Navigation("InboundOrders");

                    b.Navigation("Inventories");

                    b.Navigation("ParcelOutbounds");
                });
#pragma warning restore 612, 618
        }
    }
}
