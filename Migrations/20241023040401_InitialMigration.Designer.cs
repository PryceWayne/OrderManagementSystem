// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderManagementSystem.Data;

#nullable disable

namespace OrderManagementSystem.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241023040401_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OrderManagementSystem.Models.Billing", b =>
                {
                    b.Property<string>("BillingId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("BillingAccountId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("BillingId");

                    b.HasIndex("BillingAccountId");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.BillingAccount", b =>
                {
                    b.Property<string>("BillingAccountId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double>("AccountBalance")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("BillingAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("BillingAccounts");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Cost", b =>
                {
                    b.Property<string>("CostId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CostId");

                    b.ToTable("Costs");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.CostBasedBilling", b =>
                {
                    b.Property<string>("BillingAccountId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("CostChargeId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("BillingAccountId", "CostChargeId");

                    b.HasIndex("CostChargeId");

                    b.ToTable("CostBasedBillings");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.CostBasedCharge", b =>
                {
                    b.Property<string>("CostChargeId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CostChargeId");

                    b.ToTable("CostBasedCharges");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.FreightOutbound", b =>
                {
                    b.Property<string>("OutboundOrderId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DestinationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EstimatedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderShipDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("OutboundMethod")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RecipientPostCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferenceOrderNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RelatedAdjustmentOrder")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ShippingCompany")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TransportDays")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("OutboundOrderId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("FreightOutbounds");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.FreightProductList", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("FreightProductLists");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.InboundOrder", b =>
                {
                    b.Property<string>("InboundOrderId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ArrivalMethod")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Boxes")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EstimatedArrival")
                        .HasColumnType("datetime2");

                    b.Property<string>("InboundType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceOrderNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("InboundOrderId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("InboundOrders");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.InboundProductList", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("InboundProductLists");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Inventory", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.OrderBasedBilling", b =>
                {
                    b.Property<string>("BillingAccountId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("OrderChargeId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("BillingAccountId", "OrderChargeId");

                    b.HasIndex("OrderChargeId");

                    b.ToTable("OrderBasedBillings");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.OrderBasedCharge", b =>
                {
                    b.Property<string>("OrderChargeId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double?>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("OrderChargeId");

                    b.ToTable("OrderBasedCharges");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.OrderItem", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ProductId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.ParcelOutbound", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Boxes")
                        .HasColumnType("int");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstimatedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InternetPostingTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LatestInformation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReferenceOrderNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("RelatedAdjustmentOrder")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingCompany")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("TrackingUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransportDays")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("OrderId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("ParcelOutbounds");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.ParcelProductList", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ParcelProductLists");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.PlatformOrder", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("OrderId");

                    b.ToTable("PlatformOrders");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Warehouse", b =>
                {
                    b.Property<string>("WarehouseId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Billing", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.BillingAccount", "BillingAccount")
                        .WithMany("Billings")
                        .HasForeignKey("BillingAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingAccount");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.BillingAccount", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.User", "User")
                        .WithMany("BillingAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.CostBasedBilling", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.BillingAccount", "BillingAccount")
                        .WithMany("CostBasedBillings")
                        .HasForeignKey("BillingAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.CostBasedCharge", "CostBasedCharge")
                        .WithMany()
                        .HasForeignKey("CostChargeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingAccount");

                    b.Navigation("CostBasedCharge");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.FreightOutbound", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Warehouse", "Warehouse")
                        .WithMany("FreightOutbounds")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.FreightProductList", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.FreightOutbound", "FreightOutbound")
                        .WithMany("FreightProductLists")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Inventory", "Inventory")
                        .WithMany("FreightProductLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FreightOutbound");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.InboundOrder", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Warehouse", "Warehouse")
                        .WithMany("InboundOrders")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.InboundProductList", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.InboundOrder", "InboundOrder")
                        .WithMany("InboundProductLists")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Inventory", "Inventory")
                        .WithMany("InboundProductLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InboundOrder");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Inventory", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.Warehouse", "Warehouse")
                        .WithMany("Inventories")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Order", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.OrderBasedBilling", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.BillingAccount", "BillingAccount")
                        .WithMany("OrderBasedBillings")
                        .HasForeignKey("BillingAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.OrderBasedCharge", "OrderBasedCharge")
                        .WithMany()
                        .HasForeignKey("OrderChargeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingAccount");

                    b.Navigation("OrderBasedCharge");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.OrderItem", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Inventory", "Inventory")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.ParcelOutbound", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Warehouse", "Warehouse")
                        .WithMany("ParcelOutbounds")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.ParcelProductList", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.ParcelOutbound", "ParcelOutbound")
                        .WithMany("ParcelProductLists")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.Inventory", "Inventory")
                        .WithMany("ParcelProductLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("ParcelOutbound");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.UserRole", b =>
                {
                    b.HasOne("OrderManagementSystem.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderManagementSystem.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.BillingAccount", b =>
                {
                    b.Navigation("Billings");

                    b.Navigation("CostBasedBillings");

                    b.Navigation("OrderBasedBillings");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.FreightOutbound", b =>
                {
                    b.Navigation("FreightProductLists");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.InboundOrder", b =>
                {
                    b.Navigation("InboundProductLists");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Inventory", b =>
                {
                    b.Navigation("FreightProductLists");

                    b.Navigation("InboundProductLists");

                    b.Navigation("OrderItems");

                    b.Navigation("ParcelProductLists");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.ParcelOutbound", b =>
                {
                    b.Navigation("ParcelProductLists");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.User", b =>
                {
                    b.Navigation("BillingAccounts");

                    b.Navigation("Orders");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("OrderManagementSystem.Models.Warehouse", b =>
                {
                    b.Navigation("FreightOutbounds");

                    b.Navigation("InboundOrders");

                    b.Navigation("Inventories");

                    b.Navigation("ParcelOutbounds");
                });
#pragma warning restore 612, 618
        }
    }
}
